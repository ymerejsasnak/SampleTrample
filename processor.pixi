fn create_processor()
{
    $this = new()
    
        
    $this.setup = 
    {
        $this = $1
        $this.process_func = $2
        $this.label = $3
        $this.min = $4
        $this.max = $5
        
        app_state = PROCESS_SETTINGS
        
    }


    $this.run =
    {
        $this = $1
        
        $sample = $this.process_func($this, $this.value, clone(wave_window.data))
        
        remove(wave_window)
        
        wave_window = create_wave_window($sample, xmin + BORDER, ymin + BORDER, WINDOW_XSIZE - BORDERS, WINDOW_YSIZE/2 - BORDERS)
        
        app_state = MAIN
    
    }







    $this.normalize =
    {
        $value = $2
        $sample = $3        
        
        $max = op_cn(OP_MAXABS, $sample, 0)
        
        $factor = 32767 / $max * $value
        
        op_cn(OP_SMUL, $sample, $factor)
        
                
        ret ($sample)
    }
    
    
    $this.amplify =
    {
        $this = $1
        $value = $2
        $sample = $3
        
        $value = scale($value, 0, 1, $this.min, $this.max)
        
        op_cn(OP_SMUL, $sample, $value)
        
        ret ($sample)
    }
    
    
    $this.reverse =
    {
        $sample = $3
        
        op_cn(OP_H_FLIP, $sample)
        
        ret ($sample)
    }
    
    
    
    $this.fade_in =
    {
        $value = $2
        $sample = $3
        
        $fade_end = get_xsize($sample) * $value
        
        envelope2p($sample, 0, 32768, 0, $fade_end)
    
        ret($sample)
    }
    
    $this.fade_out =
    {
        $value = $2
        $sample = $3
        
        $fade_start = get_xsize($sample) * $value
        
        envelope2p($sample, 32768, 0, $fade_start, get_xsize($sample) - $fade_start)
    
        ret($sample)
    }
    
    $this.fade_ends =
    {
        $value = $2
        $sample = $3
        
        $fade_length = scale($value, 0, 1, 44.1, 4410)
        
        envelope2p($sample, 0, 32768, 0, $fade_length)
        envelope2p($sample, 32768, 0, get_xsize($sample) - $fade_length, $fade_length)
    
        ret($sample)
    }    
    
    
    
    $this.crossfade = //UNFINISHED
    {
        $this = $1
        $value = $2
        $sample = $3
        
        $value = scale($value, 0, 1, $this.min, $this.max)
        
        $length =  $value/100 * get_xsize($sample) 
        
        $s1 = new($length, 1, get_type($sample))
        $s2 = new(get_xsize($sample) - $length, 1, get_type($sample))
        
        copy($s1, $sample, 0, 0, $length)
        copy($s2, $sample, 0, $length, get_xsize($sample) - $length)
        
        
        
        envelope2p($s1, 0, 32768, 0, $length)
        envelope2p($s2, 32768, 0, get_xsize($s2) - $length, $length)
                
        op_cc(OP_SADD, $s2, $s1, get_xsize($s2) - $length, 0, $length)
        
        remove($sample)
        
        ret($s2)
    
    }
    
    $this.cut_end = 
    {   
        $this = $1
        $value = $2
        $sample = $3
        
        $value = scale($value, 0, 1, $this.min, $this.max) * 44.1
        
        
        $output = new(get_xsize($sample) - abs($value), 1, get_type($sample))
        clean($output)
        
        if $value < 0
        {
            copy($output, $sample, 0, -$value, get_xsize($output))
        }
        if $value > 0
        {
            copy($output, $sample, 0, 0, get_xsize($output))
        }
        
        remove($sample)
        ret($output)
    }

    $this.trim_silence = //sometimes doesn't work right or what???
    {
        $sample = $3
        
        $start = 0
        $end = get_xsize($sample) - 1
        
        while ($sample[$start] == 0)
        {
            $start + 1
        }
        
        $start = max($start - 2, 0)
        
        while ($sample[$end] == 0)
        {
            $end - 1
        }
        
        $end = min($end + 2, get_xsize($sample) - 1)
        
        $output = new($end - $start, 1, get_type($sample))
        clean($output)
       
        copy($output, $sample, 0, $start, $end - $start)
        
        
        remove($sample)
                
        ret($output)
    }




    $this.resample =
    {
        $this = $1
        $value = $2
        $sample = $3
        
        $value = scale($value, 0, 1, $this.min, $this.max)
        
        resize($sample, get_xsize($sample) / $value, -1, -1, RESIZE_INTERP2)
        
        ret ($sample)   
    
    }

    ret($this)
}

