//todo:


// cleanup/refactor


// disable other buttons when recording? (and/or any click stops recording)

// drilling buffer type noise when recording??????

//add info to wave (length, sample rate, etc)
//add 2 channel functionality


// implement diff windows/states
// and process/trample/undo!

//save to same dir file from????



include "util.pixi"

include "constants.pixi"

include "transport_functions.pixi"
include "file_functions.pixi"

include "audiocallback.pixi"
include "sampleload.pixi"
include "recordcallback.pixi"

include "button.pixi"
include "slider.pixi"
include "wave_window.pixi"
include "process_selector.pixi"
include "process_settings.pixi"

include "main_buttons.pixi"

include "processor.pixi"

resize( get_screen(), WINDOW_XSIZE, WINDOW_YSIZE )




processor = create_processor()

main_buttons = create_main_buttons()
process_selector = create_process_selector()

process_settings = create_process_settings()


load_wav()



touch_state = new()
touch_state.down = 0
touch_state.up = 0
touch_state.move = 0


//state consts
MAIN = 1
RECORDING = 2
PROCESS_SELECT = 3
PROCESS_SETTINGS = 4
TRAMPLE_SELECT = 5
TRAMPLE_SETTINGS = 6

app_state = MAIN



ptr = 0
buf = new(44100 * 60 * 4, 1, INT16)
clean(buf)







while (1)
{
    while get_event()
    {
        touch_state.down = 0
        touch_state.up = 0
        touch_state.move = 0 
               
        if EVT[EVT_TYPE] == EVT_QUIT { cleanup() }
        
        if EVT[EVT_TYPE] == EVT_MOUSEBUTTONUP
            { touch_state.up = 1 }
        
  		if EVT[EVT_TYPE] == EVT_MOUSEMOVE 
            { touch_state.move = 1 }
        
  		if EVT[EVT_TYPE] == EVT_MOUSEBUTTONDOWN 
            { touch_state.down = 1 }
  		
  	  		
  	    touch_state.x = EVT[ EVT_X ]
  		touch_state.y = EVT[ EVT_Y ]
  		
  		
  		
  		if app_state == MAIN || app_state == RECORDING
  		{
            main_buttons.update(main_buttons, touch_state)
            wave_window.update(wave_window, touch_state)
        }
        if app_state == PROCESS_SELECT
        {
            process_selector.update(process_selector, touch_state)
        }
        if app_state == PROCESS_SETTINGS
        {
            process_settings.update(process_settings, touch_state)
        }
        
    }

    
    
    clear(get_blend(BLACK, WHITE, 10))
    
    if app_state == MAIN || app_state == RECORDING
    {
        
        wave_window.draw(wave_window)
        main_buttons.draw(main_buttons)
    }
    
    if app_state == PROCESS_SELECT
    {
        
        process_selector.draw(process_selector)
    }
    
    if app_state == PROCESS_SETTINGS
    {
        process_settings.draw(process_settings)
    }
    
    
    frame()

}








//run at exit
fn cleanup()
{
    set_audio_callback(-1)
    
    //more stuff
    
    halt
}
